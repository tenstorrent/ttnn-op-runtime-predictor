import json
import re

#breaks up str "[1, 2, 3, 4]" into 1, 2, 3, 4 in 4 lists
def parse_ints_from_string(text):
    return [int(s) for s in re.findall(r'\d+', text)]

#load .json files from sweeps filedumps
def load_vectors_and_results(test_vector_filepath, results_filepath):
    test_vectors_file = open(test_vector_filepath)
    results_file = open(results_filepath)

    results = json.load(results_file)
    test_vectors = json.load(test_vectors_file)

    results_file.close()
    test_vectors_file.close()

    return test_vectors, results

#get relevant inputs from test_vectors
input_shape = [[], [], [], []]
dtype = [[], []] #bfloat8, bfloat16
input_mem_config = [[], []] #DRAM_MEMORY_CONFIG, L1_MEMORY_CONFIG
output_mem_config = [[], []] #DRAM_MEMORY_CONFIG, L1_MEMORY_CONFIG

for suite in test_vectors.keys():
    vectors = test_vectors[suite]
    for id in vectors.keys():
        dict = vectors[id]
        input = parse_ints_from_string(dict["input_shape"])
        input_dtype = dict["input_a_dtype"]
        input_memcfg = dict["input_a_memory_config"]
        output_memcfg = dict["output_memory_config"]
        input_memcfg = input_memcfg["data"]
        output_memcfg = output_memcfg["data"]
        print(type(input_memcfg))
        print(input_memcfg)
        #get input shape
        for i in range(4): # is max num of dimensions of tensor
            if i < len(input):
               input_shape[i].append(input[i])
            else:
                input_shape[i].append(0)
        #get dtype in one-hot encoding
        if input_dtype == "DataType.BFLOAT16":
            dtype[0].append(0)
            dtype[1].append(1)
        elif input_dtype == "DataType.BFLOAT8_B":
            dtype[0].append(1)
            dtype[1].append(0)
        #get memcfg in one hot encodings
        if input_memcfg == "{\"buffer_type\":0,\"memory_layout\":0}":
            input_mem_config[0].append(1)
            input_mem_config[1].append(0)
        if input_memcfg == "{\"buffer_type\":1,\"memory_layout\":0}":
            input_mem_config[0].append(0)
            input_mem_config[1].append(1)
        if output_memcfg == "{\"buffer_type\":0,\"memory_layout\":0}":
            output_mem_config[0].append(1)
            output_mem_config[1].append(0)
        if output_memcfg == "{\"buffer_type\":1,\"memory_layout\":0}":
            output_mem_config[0].append(0)
            output_mem_config[1].append(1)

#get kernel duration [ns] output from results.json
kernel_duration = []
for i in range(len(results)):
    dict = results[i]
    if "device_perf" not in dict.keys():
        kernel_duration.append(-1)
        continue
    device_perf_dict = dict["device_perf"]
    kernel_duration.append(int(device_perf_dict["DEVICE KERNEL DURATION [ns]"]))

#create csv file
with open('dmlp-op-perf/python/mlp_dataset.csv', 'w') as f:
    f.write("input_shape_1,input_shape_2,input_shape_3,input_shape_4,bfloat8,bfloat16,INPUTBUFFER0,INPUTBUFFER1,OUTPUTBUFFER0,OUTPUTBUFFER1,kernel_duration\n")
    for i in range(len(input_shape[0])):
        if kernel_duration[i] == -1:
            continue
        f.write(f"{input_shape[0][i]},{input_shape[1][i]},{input_shape[2][i]},{input_shape[3][i]},{dtype[0][i]},{dtype[1][i]},{input_mem_config[0][i]},{input_mem_config[1][i]},{output_mem_config[0][i]},{output_mem_config[1][i]},{kernel_duration[i]}\n")

print("datasetGen/exp/exp_dataset.csv created")

if __name__ == "__main__":

    test_vectors, results = load_vectors_and_results("datasetGen/exp/exp_results.json", )


    